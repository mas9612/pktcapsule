// Code generated by protoc-gen-go. DO NOT EDIT.
// source: pktcapsule.proto

package pktcapsule

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

//*
// Message Packet represents the packet data.
type Packet struct {
	// Encapsulated/Decapsulated packet data.
	Data                 []byte   `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Packet) Reset()         { *m = Packet{} }
func (m *Packet) String() string { return proto.CompactTextString(m) }
func (*Packet) ProtoMessage()    {}
func (*Packet) Descriptor() ([]byte, []int) {
	return fileDescriptor_238f71b6646f42e1, []int{0}
}

func (m *Packet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Packet.Unmarshal(m, b)
}
func (m *Packet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Packet.Marshal(b, m, deterministic)
}
func (m *Packet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Packet.Merge(m, src)
}
func (m *Packet) XXX_Size() int {
	return xxx_messageInfo_Packet.Size(m)
}
func (m *Packet) XXX_DiscardUnknown() {
	xxx_messageInfo_Packet.DiscardUnknown(m)
}

var xxx_messageInfo_Packet proto.InternalMessageInfo

func (m *Packet) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

//*
// Message EncapsulateRequest represents the request message for Encapsulate
// method.
type EncapsulateRequest struct {
	// Packet data which will be encapsulated. Linklayer header must be removed.
	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	// Source IP address which will be used in newly added IP header.
	SrcIp uint32 `protobuf:"fixed32,2,opt,name=src_ip,json=srcIp,proto3" json:"src_ip,omitempty"`
	// Destination IP address which will be used in newly added IP header.
	DstIp                uint32   `protobuf:"fixed32,3,opt,name=dst_ip,json=dstIp,proto3" json:"dst_ip,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EncapsulateRequest) Reset()         { *m = EncapsulateRequest{} }
func (m *EncapsulateRequest) String() string { return proto.CompactTextString(m) }
func (*EncapsulateRequest) ProtoMessage()    {}
func (*EncapsulateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_238f71b6646f42e1, []int{1}
}

func (m *EncapsulateRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EncapsulateRequest.Unmarshal(m, b)
}
func (m *EncapsulateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EncapsulateRequest.Marshal(b, m, deterministic)
}
func (m *EncapsulateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EncapsulateRequest.Merge(m, src)
}
func (m *EncapsulateRequest) XXX_Size() int {
	return xxx_messageInfo_EncapsulateRequest.Size(m)
}
func (m *EncapsulateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_EncapsulateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_EncapsulateRequest proto.InternalMessageInfo

func (m *EncapsulateRequest) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *EncapsulateRequest) GetSrcIp() uint32 {
	if m != nil {
		return m.SrcIp
	}
	return 0
}

func (m *EncapsulateRequest) GetDstIp() uint32 {
	if m != nil {
		return m.DstIp
	}
	return 0
}

//*
// Message DecapsulateRequest represents the request message for Decapsulate
// method.
type DecapsulateRequest struct {
	// Packet data which will be decapsulated. Linklayer header must be removed.
	Data                 []byte   `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DecapsulateRequest) Reset()         { *m = DecapsulateRequest{} }
func (m *DecapsulateRequest) String() string { return proto.CompactTextString(m) }
func (*DecapsulateRequest) ProtoMessage()    {}
func (*DecapsulateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_238f71b6646f42e1, []int{2}
}

func (m *DecapsulateRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DecapsulateRequest.Unmarshal(m, b)
}
func (m *DecapsulateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DecapsulateRequest.Marshal(b, m, deterministic)
}
func (m *DecapsulateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DecapsulateRequest.Merge(m, src)
}
func (m *DecapsulateRequest) XXX_Size() int {
	return xxx_messageInfo_DecapsulateRequest.Size(m)
}
func (m *DecapsulateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DecapsulateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DecapsulateRequest proto.InternalMessageInfo

func (m *DecapsulateRequest) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterType((*Packet)(nil), "pktcapsule.Packet")
	proto.RegisterType((*EncapsulateRequest)(nil), "pktcapsule.EncapsulateRequest")
	proto.RegisterType((*DecapsulateRequest)(nil), "pktcapsule.DecapsulateRequest")
}

func init() { proto.RegisterFile("pktcapsule.proto", fileDescriptor_238f71b6646f42e1) }

var fileDescriptor_238f71b6646f42e1 = []byte{
	// 189 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x28, 0xc8, 0x2e, 0x49,
	0x4e, 0x2c, 0x28, 0x2e, 0xcd, 0x49, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x42, 0x88,
	0x28, 0xc9, 0x70, 0xb1, 0x05, 0x24, 0x26, 0x67, 0xa7, 0x96, 0x08, 0x09, 0x71, 0xb1, 0xa4, 0x24,
	0x96, 0x24, 0x4a, 0x30, 0x2a, 0x30, 0x6a, 0xf0, 0x04, 0x81, 0xd9, 0x4a, 0x61, 0x5c, 0x42, 0xae,
	0x79, 0x10, 0xa5, 0x89, 0x25, 0xa9, 0x41, 0xa9, 0x85, 0xa5, 0xa9, 0xc5, 0x58, 0x55, 0x0a, 0x89,
	0x72, 0xb1, 0x15, 0x17, 0x25, 0xc7, 0x67, 0x16, 0x48, 0x30, 0x29, 0x30, 0x6a, 0xb0, 0x07, 0xb1,
	0x16, 0x17, 0x25, 0x7b, 0x16, 0x80, 0x84, 0x53, 0x8a, 0x4b, 0x40, 0xc2, 0xcc, 0x10, 0xe1, 0x94,
	0xe2, 0x12, 0xcf, 0x02, 0x25, 0x0d, 0x2e, 0x21, 0x97, 0x54, 0x62, 0xcc, 0x35, 0x9a, 0xc6, 0xc8,
	0xc5, 0x15, 0x90, 0x5d, 0xe2, 0x0c, 0x71, 0xae, 0x90, 0x33, 0x17, 0x37, 0x92, 0x83, 0x84, 0xe4,
	0xf4, 0x90, 0x3c, 0x87, 0xe9, 0x52, 0x29, 0x21, 0x64, 0x79, 0x88, 0x3f, 0x95, 0x18, 0x40, 0x86,
	0x20, 0xd9, 0x8e, 0x6a, 0x08, 0xa6, 0xb3, 0xb0, 0x1b, 0x92, 0xc4, 0x06, 0x0e, 0x4b, 0x63, 0x40,
	0x00, 0x00, 0x00, 0xff, 0xff, 0xf1, 0x38, 0xc6, 0x7a, 0x5f, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// PktCapsuleClient is the client API for PktCapsule service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PktCapsuleClient interface {
	// Encapsulate adds newly IP header to the given packet data.
	Encapsulate(ctx context.Context, in *EncapsulateRequest, opts ...grpc.CallOption) (*Packet, error)
	// Decapsulate removes outer IP header from the given packet data.
	Decapsulate(ctx context.Context, in *DecapsulateRequest, opts ...grpc.CallOption) (*Packet, error)
}

type pktCapsuleClient struct {
	cc *grpc.ClientConn
}

func NewPktCapsuleClient(cc *grpc.ClientConn) PktCapsuleClient {
	return &pktCapsuleClient{cc}
}

func (c *pktCapsuleClient) Encapsulate(ctx context.Context, in *EncapsulateRequest, opts ...grpc.CallOption) (*Packet, error) {
	out := new(Packet)
	err := c.cc.Invoke(ctx, "/pktcapsule.PktCapsule/Encapsulate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pktCapsuleClient) Decapsulate(ctx context.Context, in *DecapsulateRequest, opts ...grpc.CallOption) (*Packet, error) {
	out := new(Packet)
	err := c.cc.Invoke(ctx, "/pktcapsule.PktCapsule/Decapsulate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PktCapsuleServer is the server API for PktCapsule service.
type PktCapsuleServer interface {
	// Encapsulate adds newly IP header to the given packet data.
	Encapsulate(context.Context, *EncapsulateRequest) (*Packet, error)
	// Decapsulate removes outer IP header from the given packet data.
	Decapsulate(context.Context, *DecapsulateRequest) (*Packet, error)
}

func RegisterPktCapsuleServer(s *grpc.Server, srv PktCapsuleServer) {
	s.RegisterService(&_PktCapsule_serviceDesc, srv)
}

func _PktCapsule_Encapsulate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EncapsulateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PktCapsuleServer).Encapsulate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pktcapsule.PktCapsule/Encapsulate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PktCapsuleServer).Encapsulate(ctx, req.(*EncapsulateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PktCapsule_Decapsulate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DecapsulateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PktCapsuleServer).Decapsulate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pktcapsule.PktCapsule/Decapsulate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PktCapsuleServer).Decapsulate(ctx, req.(*DecapsulateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _PktCapsule_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pktcapsule.PktCapsule",
	HandlerType: (*PktCapsuleServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Encapsulate",
			Handler:    _PktCapsule_Encapsulate_Handler,
		},
		{
			MethodName: "Decapsulate",
			Handler:    _PktCapsule_Decapsulate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pktcapsule.proto",
}
